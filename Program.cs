internal class Program
{
    private static void Main(string[] args)
    {
        // Code generated by an ASP.NET Core template
        var builder = WebApplication.CreateBuilder(args);
        // Add service
        builder.Services.AddEndpointsApiExplorer();
        var app = builder.Build();

        app.UseHttpsRedirection();

        // Creates a list of robot commands and populate the list with default robot commands  
        var commandRecords = new List<RobotCommand>(){
            // Three different ways to create RobotCommands
            new RobotCommand(Name: "MOVE", IsMoveCommand: true, Id:0),
            new RobotCommand("LEFT", true, 1),
            new("RIGHT", true, 2),
            new("PLACE", false, 3),
            new("BLINK", false, 4)
        };

        // Creates a map of size 10 by 10 units
        var robotMap = new RobotMap("10x10", 10);

        // Default endpoint is set to display "Hello, Robot"
        // WebApplication supports Map{Verb} and MapMethods such as MapGet, MapPost, MapPut, MapDelete, etc
        app.MapGet("/", () => "Hello, Robot!");

        // Robot commands endpoint displays a list of robot commands
        app.MapGet("/robot-commands", () =>
        {
            return commandRecords;
        });

        // Robot commands - move endpoint
        app.MapGet("/robot-commands/move", () =>
        {
            // Only return robot commands that are move commands
            return commandRecords.Where(x => x.IsMoveCommand == true);
        });

        // Robot commands - id endpoint
        // Route paramter id is used to filter robot commands
        app.MapGet("/robot-commands/{id}", (int id) =>
        {
            return commandRecords.Where(x => x.Id == id);
        });

        // MapPost allows us to add a new a new robot command 
        app.MapPost("/robot-commands", (RobotCommand newCommand) =>
        {
            // Need to add validation that newCommand is a vaid command - unique Id and name
            // Add the new robot command to the list of robot commands
            commandRecords.Add(newCommand);
            // Return the new robot command
            return Results.Created($"/robot-commands/{newCommand.Name}", commandRecords);
        });

        // MapPut allows us to update a robot command
        app.MapPut("/robot-commands/{id}", (RobotCommand updatedCommand) =>
        {
            // Store the Id of the user inputed updated robot command
            int IdOfCommandToUpdate = updatedCommand.Id;

            // Declare a robot command as nullable and check if you can find the id
            RobotCommand? toUpdate = commandRecords.Find(c => c.Id == updatedCommand.Id);

            // Validate newCommand is a vaid command
            if(toUpdate != null)
            {
                // Remove command we want to update
                commandRecords.Remove(toUpdate);
                // Replace with the updated command
                commandRecords.Add(updatedCommand);
                
                return "Update Successful";
            }
            
            return "Update Unsuccessful";
        });

        // Robot map end point - will display the robot map
        app.MapGet("/robot-map", () =>
        {
            return robotMap;
        });

        // Robot map - coordinate endpoint
        // Route paramter coordinate allows users to check if a coordinate is on the map
        app.MapGet("/robot-map/{coordinate}", (string coordinate) =>
        {
            // Parse the coordinates
            string[] coordinates = coordinate.Split("-");
            int[] coordinatesNum = Array.ConvertAll(coordinates, int.Parse);

            // Check if the coordinate is on the map
            return robotMap.IsOnMap(coordinatesNum[0], coordinatesNum[1]);
        });

        // MapPut allows us to update the robot map
        app.MapPut("/robot-map", (RobotMap updatedMap) =>
        {
            // validate size is a vaid size
            if(updatedMap.size > 0 && updatedMap.size < 101)
            {
                robotMap = updatedMap;

                return "Update Successful";
            }
            
            return "Update Unsuccessful";
        });

        app.Run();
    }
}

// Creates a robot command record (a new reference type introduced in C# 9)
public record RobotCommand(string Name, bool IsMoveCommand, int Id);

// Creates a map record
record RobotMap(string Name, int size)
{
    // Checks if a coordinate is on the map
    public bool IsOnMap(int x, int y)
    {
        return x > 0 && y > 0 && x <= size && y <= size;
    }
}